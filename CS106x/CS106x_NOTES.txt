			* Lecture 2 *

> Reference Semantics or Reference passing is better than Pointers because a lot of Syntax or Syntactical mistakes can be avoided. But if the API implements Reference 
  Semantics, there is no way for the Caller to know if the API modifies the variables or not. This can be an extra point of concern while debugging.

Example:

    //Advantage is no need of & and * as for pointers.
    void swap(int& a, int& b) {
        int t = a;
        a = b;
        b = t;
    }

    main() {
        int x = 5;
        int y = 10;
        swap(x, y) //Caller does NOT know if swap takes reference or value. This is bad for debugging
        cout << x << endl;
        return 0;
    }

> Although there is a big difference between Pointers and References. If "swap" accepts pointers, it creates pointer variables 'a' and 'b' i.e. allocates space etc. For 
  reference passing as we see here, there is NO space ceated. Check last 4 minutes of - https://www.youtube.com/watch?v=4fJBrditnJU

			* Lecture 3 [ Strings ] *

> C++ has 2 types of Strings:
  - C Strings which are Char arrays
  - C++ Strings which are objects

> Conversion between C and C++ Strings
  - C to C++ String -> string("text")
  - C++ to C String -> string.c_str()

> Do NOT concatenate C Style Strings like
  - string s = "hi" + "there" [ Not allowed ]

			* Lecture 4 [ Collections - Vectors ]*

> Vectors are like ArrayLists in Java or Lists in Python
> Its like a Dynamically re-sizing Array that can be of certain Type
> In Python the same List can store MULTIPLE Types. In Java and C++ we cannot I think
> Although we can nest Vectors so like

    //each element of vv is a Vector
    Vector<Vector<int>> vv;
    //vv has 3 elements all Vectors
    vv = { {1}, {1,2,3}, {5,6}}

			* Lecture 5 [ Collections - Stacks and Queues ] *

> Vectors vs Linked Lists
 - Think about which data operations are most frequent
 - Think where we will be adding/removing data, at the end or the middle etc?
 - Think about cache hits or misses
 - Bjarne says Vectors are ALWAYS better than LL's [ for any size LOL ]

> Stacks are generally implemented as Vectors and not LL's in C++
> Queue is generally implemented as an LL [ dequeuing is faster in LL coz no shifting needed like Vectors unless its a clever Circular vector maybe? ]
> Deque combines both Stack and Queue. We can add/remove from front and back O(1)

Usage of Deque? [ from StackOverflow ] =>

"""
A Deque is a double ended queue, allowing inserting and removing from both ends.

In real scenario we can attached it to a Ticket purchasing line, It performs like a queue but some time It happens that some body has purchased the ticket and sudden they come 
back to ask some thing on front of queue. In this scenario because they have already purchased the ticket so they have privilege to come and ask for any further query. So in these 
kind of scenario we need a data structure where according to requirement we add data from front. And In same scenario user can also leave the queue from rear.

So it follows completely data structure of Deque.
"""

			* Lecture 6 [ Sets and Maps and Lexicons ] *

> Set is implemented using a Binary Tree structure [ sorted order, generally a Red-Black ]. In Java its called a TreeSet
> HashSet is implemented using a Hash Table [ random order ]

If elements need to be in Sorted order use Set, or else use HashSet [ higher performance ]

> If you want to store complex datatype like a Struct in a Set, we need a comparator [ overload the < operator to be specific in C++ to make it Sortable ]
  Same thing for a HashSet, we need a '==', '!=' and a hashCode function [ 3 things ]

> Lexicons is like a Dictionary [ Set of Strings but it does NOT have definitions [ or values ] LOL ] used for Prefix lookup coz it has a Prefix tree

> Maps is like a Lexicon but STORES definitions. Its a K-V datastore e.g. Phonebook, Dictionary, Social buddy list etc.
> Set vs HashSet == Maps [ ordered, implements using BST usually Red-Black ]  vs HashMaps [ unordered, implemented using HashTable ]
> https://stackoverflow.com/questions/2196995/is-there-any-advantage-of-using-map-over-unordered-map-in-case-of-trivial-keys

Code example [ ultra-cool ], lets read a book word by word and store occurences =>

    Map<string, int> counters;

    ...//Read 'word' here

    if(!counters.containsKey(word)) {
        counters.put(word, 1);
    } else {
        int count = counters.get(word);
        counters.put(word, count + 1);
    }

   //All the above 6 lines can be replaced by a single line
   counters[word]++;

LOL

> Get Anagrams of a given word from a Dictionary. How? "HashMap<string, Set<string>> anagrams" where the K = sorted version of any 'word'
  The idea is that the Sorted version of ALL ANAGRAMS = same, so we use that as the Key to Store and Retrieve

HW: Code a program to check total unique words from a Book, find total occurences of the given word and all anagrams of it.
Ans: HashSet<string> and get the size, HashMap<string, int> and search on it, HashMap<string, Set<string>> respectively.

			* Lecture 7 [ Recursion ] *

> Use recursion when to solve a problem, you need to solve a modified or simpler version of the same problem.
> It generally removes looping constructs, its a computational mechanism that can allow repetition without looping hmm.
> Recursion is pretty good at reversing things, because it functions as a Stack inherently which is by nature good at reversing things - LIFO

			* Lecture 8, 9 [ Recursion, Fractals ] *

			* Lecture 10 [ Exhaustive Search ] *

> Exploring every possible combination from a set of values - Exhaustive search. Often implemented recursively.
> check backtracking.cpp

			* Lecture 11 [ Backtracking ] *

> Find solutions by partially solving and abandoning if they are not suitable
> Generally uses recursion
> Its a brute force technique
> Exhaustive Search is a type of Backtracking where ALL solutions are suitable. So we print all of them. In contrast, Backtracking is a form of
  exhaustive search where we need to discard/abandon some solutions midway.
> So problems that require Filtering for instance, find all numbers that have 'n' digits BUT output only those that add up to K maybe.

> GENERAL ALGO [ Pass a Sub-Problem to the Recursion ]
- Make a Choice or Take an action - this creates the current STATE of the problem
- Solve the same problem using this CURRENT STATE [ Pass the Current State, and instructions on how to go to the next State ]
- Base case is the case that implements a GOAL, so when the problem reaches a CERTAIN KNOWN STATE, we take some BASE CASE ACTION
- Use a FOR LOOP ONLY if at a given STATE when we need to make a CHOICE, we have multiple options to choose from, but do NOT traverse
  or LOOP to get to NEW STATES, GOING TO A NEW STATE MUST BE RECURSIONS JOB
- Think if Problem has 1 UNIQUE solution or Multiple? Can implement the base case accordingly

			* Lecture 13,14 [ Pointers and LL ] *

> Always declare a Pointer as a NULL POINTER. Or else it is super hard to debug bugs.

> A Struct is actually a Class in C++ or any OOP Language. The only difference is that everything inside the Struct is Public.
> Struct is a feature for the C style programmers and it can also be used as a lightweight Class

> "new" allocates memory on HEAP

			* Lecture 16 [ Classes ] *

> const is important in Class member functions
    class TEST {
    public:
        void show() const;
    private:
        int x;
    };
> const is more like a contract [ promise ]
> https://www.youtube.com/watch?v=4fJBrditnJU&list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb&index=34

			* Lecture 17 [ Classes ] *

> 'friend' keyword lets an external function access private data in the Object. "If you're a friend you can touch my privates"...
> Design wise if there is a function that needs to touch the private data, it should BE a part of the Class right? So "friend" is used in special cases where 
  a function HAS to be written as a Global entity but they are inherently tied to the Class semantically, so it should be allowed to touch the private stuff! 

			* Lecture 22 [ Graphs ] *

> Binary Tree is ALSO a Graph
- Directed, Acyclic, Unweighted
- Node's in degree <= 1 and out degree <= 2
- There is exactly 1 path from root to every node

> LL is ALSO a Graph
- Directed, Acyclic, Unweighted
- Node's in and out degree <= 1

> DFS finds the path BUT it is NOT guaranteed to find the Shortest Path [ Generally Stack is used to store traversed path ]
> BFS finds the Shortest Path [ Generally uses Queue ]
> Both use a DS to store Visited Nodes

			* Lecture 23 [ Graphs, DFS, BFS ] *

> Most languages do NOT EVEN try to implement a Graph, it is quite complicated to package into a generic library
> BFS and DFS do NOT consider Edge Weights [ for some problems we might need edge weights ]
- * ENTER COMPLEX GRAPH ALGORITHMS *
- Dijkstra, A* etc.

======= DS [ Any Usage of DS in a project must be thoroughly examined. What data and what kind of Operations, the frequence of those must be studied ]=======
1. Arrays
2. Vectors
3. Linked Lists
4. Stacks [ ADT ]
5. Queues [ ADT ]
6. Sets [ ADT ] => Set/TreeSet[Java] and HashSet in C++
7. Maps/Dict etc [ ADT ] => Map and HashMap in C++
8. Heap
9. 




