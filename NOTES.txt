* Lecture 2 *

> Reference Semantics or Reference passing is better than Pointers because a lot of Syntax or Syntactical mistakes can be avoided. But if the API implements Reference 
  Semantics, there is no way for the Caller to know if the API modifies the variables or not. This can be an extra point of concern while debugging.

Example:

    //Advantage is no need of & and * as for pointers.
    void swap(int& a, int& b) {
        int t = a;
        a = b;
        b = t;
    }

    main() {
        int x = 5;
        int y = 10;
        swap(x, y) //Caller does NOT know if swap takes reference or value. This is bad for debugging
        cout << x << endl;
        return 0;
    }

> Although there is a big difference between Pointers and References. If "swap" accepts pointers, it creates pointer variables 'a' and 'b' i.e. allocates space etc. For 
  reference passing as we see here, there is NO space ceated. Check last 4 minutes of - https://www.youtube.com/watch?v=4fJBrditnJU

 *Lecture 3 [ Strings ] *

> C++ has 2 types of Strings:
  - C Strings which are Char arrays
  - C++ Strings which are objects

> Conversion between C and C++ Strings
  - C to C++ String -> string("text")
  - C++ to C String -> string.c_str()

> Do NOT concatenate C Style Strings like
  - string s = "hi" + "there" [ Not allowed ]

* Lecture 4 [ Collections - Vectors ]*

> Vectors are like ArrayLists in Java or Lists in Python
> Its like a Dynamically re-sizing Array that can be of certain Type
> In Python the same List can store MULTIPLE Types. In Java and C++ we cannot I think
> Although we can nest Vectors so like

    //each element of vv is a Vector
    Vector<Vector<int>> vv;
    //vv has 3 elements all Vectors
    vv = { {1}, {1,2,3}, {5,6}}

* Lecture 5 [ Collections - Stacks and Queues ] *

> Vectors vs Linked Lists
 - Think about which data operations are most frequent
 - Think where we will be adding/removing data, at the end or the middle etc?
 - Think about cache hits or misses
 - Bjarne says Vectors are ALWAYS better than LL's [ for any size LOL ]

> Stacks are generally implemented as Vectors and not LL's in C++
> Queue is generally implemented as an LL [ dequeuing is faster in LL coz no shifting needed like Vectors unless its a clever Circular vector maybe? ]
> Deque combines both Stack and Queue. We can add/remove from front and back O(1)

Usage of Deque? [ from StackOverflow ] =>

"""
A Deque is a double ended queue, allowing inserting and removing from both ends.

In real scenario we can attached it to a Ticket purchasing line, It performs like a queue but some time It happens that some body has purchased the ticket and sudden they come back to ask some thing on front of queue. In this scenario because they have already purchased the ticket so they have privilege to come and ask for any further query. So in these kind of scenario we need a data structure where according to requirement we add data from front. And In same scenario user can also leave the queue from rear.

So it follows completely data structure of Deque.
"""

* Lecture 6 [ Sets and Maps ] *

> 


* Lecture 16 [ Classes ] *

> const is important in Class member functions
    class TEST {
    public:
        void show() const;
    private:
        int x;
    };
> const is more like a contract [ promise ]

* Lecture 17 [ Classes ] *

> 'friend' keyword lets an external function access private data in the Object. "If you're a friend you can touch my privates"...
> Design wise if there is a function that needs to touch the private data, it should BE a part of the Class right? So "friend" is used in special cases where 
  a function HAS to be written as a Global entity but they are inherently tied to the Class semantically, so it should be allowed to touch the private stuff! 

======= DS [ Any Usage of DS in a project must be thoroughly examined. What data and what kind of Operations, the frequence of those must be studied ]=======
1. Arrays
2. Vectors
3. Linked Lists
4. Stacks [ ADT ]
5. Queues [ ADT ]
6. Sets [ ADT ]
7. Maps/Dict etc [ ADT ]
8. Heap
9. 




